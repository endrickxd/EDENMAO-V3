@page "/cliente"
@using Edenmao.UI.Frontend.Services
@using Edenmao.UI.Frontend.Modals
@inject ClienteServices clienteServices;
@inject NavigationManager Navigation

<div class="container">
    <h3><strong>Cliente</strong></h3>

    <div class="NewRegister">
        <button @onclick="CrearCliente" class="NuevoRegistro btn btn-primary mb-3">Registrar Nuevo</button>
    </div>

    <input type="text" @bind="searchText" @oninput="FilterCliente" placeholder="Buscar Cliente (por (Nombre, Apellido)" class="form-control search-bar mb-3" />

    @if (clientes == null)
    {
        <p><em>Cargando... Por favor, Espere</em></p>
    }
    else
    {
        <div class="table-container">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Nombre del Cliente</th>
                        <th>Apellido del Cliente</th>
                        <th>Telefono</th>
                        <th>Email</th>
                        <th>Direccion</th>
                        <th>Fecha De Registro</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in FilteredCliente)
                    {
                        <tr>
                            <td>@cliente.Nombre</td>
                            <td>@cliente.Apellido</td>
                            <td>@cliente.Telefono</td>
                            <td>@cliente.Email</td>
                            <td>@cliente.Direccion</td>
                            <td>@cliente.FechaRegistro</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditarClientes(cliente.Id)">Editar</button>
                                <button class="btn btn-danger" @onclick="() => EliminarClientes(cliente.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private IEnumerable<Clientesp>? clientes;
    private IEnumerable<Clientesp>? FilteredCliente;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clientes = await clienteServices.GetAllClientes();
        FilteredCliente = clientes;
    }

    private void CrearCliente()
    {
        Navigation.NavigateTo("/cliente/create");
    }
    private void EditarClientes(int id)
    {
        Navigation.NavigateTo($"/clientes/edit/{id}");
    }

    private async Task EliminarClientes(int id)
    {
        await clienteServices.DeleteClientes(id);
        clientes = await clienteServices.GetAllClientes();
        FilterCliente();
    }

    private void FilterCliente()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredCliente = clientes;
        }
        else
        {
            FilteredCliente = clientes?.Where(p =>
                p.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Apellido.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Direccion.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Telefono.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.FechaRegistro.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }
    }
}