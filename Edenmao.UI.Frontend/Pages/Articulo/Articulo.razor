@page "/articulo"
@using Edenmao.UI.Frontend.Services
@using Edenmao.UI.Frontend.Modals
@inject ArticuloServices articuloservices;
@inject NavigationManager navigation


<div class="container">
    <h3><strong>Articulo</strong></h3>

    <div class="NewRegister">
        <button @onclick="CrearArticulo" class=" NuevoRegistro btn btn-primary mb-3">Registrar Nuevo</button>
    </div>

    <input type="text" @bind="searchText" @oninput="FilterArticulo" placeholder="Buscar Articulo (por (Nombre, Descripcion)" class="form-control search-bar mb-3" />

    @if (articulos == null)
    {
        <p><em>Cargando... Por favor, Espere</em></p>
    }
    else
    {
        <div class="table-container">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Articulo</th>
                        <th>Descripcion</th>
                        <th>Precio</th>
                        <th>Stock</th>
                        <th>Categoria</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var articulo in FilteredArticulo)
                    {
                        <tr>
                            <td>@articulo.Nombre</td>
                            <td>@articulo.Descripcion</td>
                            <td>@articulo.Precio</td>
                            <td>@articulo.Stock</td>
                            <td>@articulo.NombreCategoria</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditarArticulos(articulo.Id)">Editar</button>
                                <button class="btn btn-danger" @onclick="() => EliminarArticulos(articulo.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private IEnumerable<Articulop>? articulos;
    private IEnumerable<Articulop>? FilteredArticulo;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        articulos = await articuloservices.GetAllArticulos();
        FilteredArticulo = articulos;
    }
     private void CrearArticulo()
    {
        navigation.NavigateTo("/articulo/create");
    }

    private void EditarArticulos(int id)
    {
        navigation.NavigateTo($"/articulos/edit/{id}");
    }

    private async Task EliminarArticulos(int id)
    {
        await articuloservices.DeleteArticulos(id);
        articulos = await articuloservices.GetAllArticulos();
        FilterArticulo();
    }

    private void FilterArticulo()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredArticulo = articulos;
        }
        else
        {
            FilteredArticulo = articulos?.Where(p =>
                p.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Descripcion.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Precio.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.Stock.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                p.IdCategoria.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }
    }
}