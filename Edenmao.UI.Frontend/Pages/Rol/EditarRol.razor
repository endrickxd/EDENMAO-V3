@page "/rol/edit/{id:int}"
@using Edenmao.Core.DTOs
@using Edenmao.Core.DTOs.Rol
@using Edenmao.UI.Frontend.Services
@inject RolServices rolservices
@inject NavigationManager Navigation

<link href="~/css/app.css" rel="stylesheet" />
<link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />

<div class="container">
    <h3>Editar Rol</h3>
    <hr />

    @if (rol == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {

        <EditForm Model="rol" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="Nombre">Nombre</label>
                <InputText id="Nombre" class="form-control" @bind-Value="rol.Nombre" />
                <ValidationMessage For="@(() => rol.Nombre)" />
            </div>
            <div class="form-group">
                <label for="descripcion">Descripcion</label>
                <InputText id="descripcion" class="form-control" @bind-Value="rol.Descripcion" />
                <ValidationMessage For="@(() => rol.Descripcion)" />
            </div>

            <div class="button-container">
                <button type="submit" class="btn btn-success">Registrar Datos</button>
                <button class="btn-back" @onclick="Volver">Volver</button>
            </div>

        </EditForm>

        @if (!string.IsNullOrEmpty(Mensaje))
        {
            <div class="alert alert-success mt-3">@Mensaje</div>
        }
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private RolDTO rol;
    private string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        rol = await rolservices.GetRolsById(id);
    }
    private async Task HandleValidSubmit()
    {
        await rolservices.UpdateRols(id, rol);
        Mensaje = "¡Los Datos del Rol han sido Actualizados de Manera Satisfactoria!";
    }
    private void Volver()
    {
        Navigation.NavigateTo("/rol");
    }
}


